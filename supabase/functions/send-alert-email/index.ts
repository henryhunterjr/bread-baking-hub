import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { corsHeaders } from "../_shared/cors.ts"

interface AlertThreshold {
  metric: string
  current: number
  baseline: number
  threshold: number
  change: number
  changePercent: number
  status: 'ok' | 'warning' | 'critical'
  description: string
}

interface AlertSummary {
  timestamp: string
  overallStatus: 'healthy' | 'warning' | 'critical'
  alerts: AlertThreshold[]
  summary: string
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const { to, alertSummary }: { to: string; alertSummary: AlertSummary } = await req.json()

    if (!to || !alertSummary) {
      return new Response(
        JSON.stringify({ error: 'Missing required fields' }),
        { 
          status: 400, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      )
    }

    // Get Resend API key from secrets
    const RESEND_API_KEY = Deno.env.get('RESEND_API_KEY')
    if (!RESEND_API_KEY) {
      console.error('RESEND_API_KEY is not configured')
      return new Response(
        JSON.stringify({ error: 'Email service not configured' }),
        { 
          status: 500, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      )
    }

    // Format alert details
    const criticalAlerts = alertSummary.alerts.filter(alert => alert.status === 'critical')
    const warningAlerts = alertSummary.alerts.filter(alert => alert.status === 'warning')

    let htmlContent = `
      <h2>üö® BakingGreatBread.com - System Alert</h2>
      <p><strong>Status:</strong> ${alertSummary.overallStatus.toUpperCase()}</p>
      <p><strong>Time:</strong> ${new Date(alertSummary.timestamp).toLocaleString()}</p>
      <p><strong>Summary:</strong> ${alertSummary.summary}</p>
    `

    if (criticalAlerts.length > 0) {
      htmlContent += `
        <h3>üî¥ Critical Issues</h3>
        <ul>
      `
      criticalAlerts.forEach(alert => {
        const changeDirection = alert.change >= 0 ? '‚ÜóÔ∏è' : '‚ÜòÔ∏è'
        htmlContent += `
          <li>
            <strong>${alert.metric}:</strong> ${alert.current.toFixed(2)} 
            (${changeDirection} ${alert.changePercent.toFixed(1)}% from baseline: ${alert.baseline.toFixed(2)})
            <br><em>${alert.description}</em>
          </li>
        `
      })
      htmlContent += '</ul>'
    }

    if (warningAlerts.length > 0) {
      htmlContent += `
        <h3>‚ö†Ô∏è Warnings</h3>
        <ul>
      `
      warningAlerts.forEach(alert => {
        const changeDirection = alert.change >= 0 ? '‚ÜóÔ∏è' : '‚ÜòÔ∏è'
        htmlContent += `
          <li>
            <strong>${alert.metric}:</strong> ${alert.current.toFixed(2)} 
            (${changeDirection} ${alert.changePercent.toFixed(1)}% from baseline: ${alert.baseline.toFixed(2)})
            <br><em>${alert.description}</em>
          </li>
        `
      })
      htmlContent += '</ul>'
    }

    htmlContent += `
      <hr>
      <p><small>
        This alert was automatically generated by the BakingGreatBread.com monitoring system.
        <br>Dashboard: <a href="https://bakinggreatbread.com/owner/analytics">View Analytics</a>
      </small></p>
    `

    // Send email using Resend
    const emailResponse = await fetch('https://api.resend.com/emails', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${RESEND_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        from: 'alerts@bakinggreatbread.com',
        to: [to],
        subject: `[${alertSummary.overallStatus.toUpperCase()}] BakingGreatBread.com System Alert`,
        html: htmlContent
      })
    })

    if (!emailResponse.ok) {
      const errorText = await emailResponse.text()
      console.error('Failed to send email:', errorText)
      return new Response(
        JSON.stringify({ 
          error: 'Failed to send alert email',
          details: errorText
        }),
        { 
          status: 500, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      )
    }

    const emailResult = await emailResponse.json()
    console.log('Alert email sent successfully:', emailResult.id)

    return new Response(
      JSON.stringify({ 
        success: true, 
        emailId: emailResult.id,
        summary: alertSummary.summary 
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    )

  } catch (error) {
    console.error('Error in send-alert-email function:', error)
    return new Response(
      JSON.stringify({ 
        error: 'Internal server error',
        details: error.message 
      }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    )
  }
})